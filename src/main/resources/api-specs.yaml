openapi: 3.0.0

info:
  title: Fortune  API specification
  description: OAS for the Fortune application.
  version: 0.1

servers:
  - url: https://api.fortune.com/v1
    description: Production server. 
  - url: https://api.fortune-dev.com/v1
    description: Development server.

paths:
  /users/{userId}/:
    parameters:
      - $ref: '#/components/parameters/UserIdParam'
    get:
      summary: Returns all user data.
      description: Returns all user data.
      responses:
        '200':
          description: A JSON containing all user data.
          content:
            application/json:
              schema: 
                type: object
                properties: 
                  id:
                    type: string
                    format: uuid
                    example: 550e8400-e29b-41d4-a716-446655440000
                  fullName:
                    type: string
                    example: Jeroen Dekker
                  email:
                    type: string
                    example: someone@evilmastermind.com
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'  
    patch:
      summary: Update existing user
      requestBody:
        description: Information needed to update a user.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: No content
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'  
    delete:
      summary: Delete a user.
      description: Deletes all data of the given user.
      responses:
        '204':
          $ref: '#/responses/204NoContent'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/404NotFound'
        '500':
          $ref: '#/responses/500ServerError'  
  /users/{userId}/bank-accounts:
    parameters:
      - $ref: '#/components/parameters/UserIdParam'
    get:
      summary: Returns all bank accounts
      parameters:
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/searchParam'
        - $ref: '#/components/parameters/sortOrderParam'
      responses:
        '200':
          description: An array containing all bank accounts of a specific user.
          content:
            application/json:
              schema: 
                type: aray
                items:
                  $ref: '#/schemas/BankAccount'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'  
    post:
      summary: Adding a new bank account for a specific user.
      requestBody:
        description: Information needed to add a new bank account to a user.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankAccount'
      responses:
        '201':
          $ref: '#/components/schemas/201Created'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'
  /users/{userId}/bank-accounts/{bankAccountId}/:
    parameters:
      - $ref: '#/components/parameters/UserIdParam'
      - $ref: '#/components/parameters/BankAccountIdParam'
    get:
      summary: Returns bank account data
      responses:
        '200':
          description: A JSON containing bank account data.
          content:
            application/json:
              schema:
                $ref: '#/schemas/BankAccount'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'
    patch:
      summary: Updating a bank account.
      requestBody:
        description: Information needed to update a bank account.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankAccount'
      responses:
        '200':
          $ref: '#/components/schemas/200Ok'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'
    delete:
      summary: Delete a bank account.
      description: Deletes all data of the given bank account.
      responses:
        '204':
          $ref: '#/responses/204NoContent'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'
  /users/{userId}/bank-accounts/{bankAccountId}/payments/:
    parameters:
      - $ref: '#/components/parameters/UserIdParam'
      - $ref: '#/components/parameters/BankAccountIdParam'
    get:
      summary: Returns all payments of a specific bank account
      parameters:
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/searchParam'
        - $ref: '#/components/parameters/sortOrderParam'
      responses:
        '200':
          description: An array containing all payments of a specific bank account.
          content:
            application/json:
              schema:
                type: aray
                items:
                  $ref: '#/schemas/Payment'
    post:
      summary: Adding new payments to a bank account.
      requestBody:
        description: Payments to be added.
        required: true
        content:
          multipart/form-data:
            schema:
              type: string
                format: binary
      responses:
        '201':
          $ref: '#/components/schemas/201Created'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'
  /users/{userId}/bank-accounts/{bankAccountId}/payments/{paymentId}/:
    parameters:
      - $ref: '#/components/parameters/UserIdParam'
      - $ref: '#/components/parameters/BankAccountIdParam'
      - $ref: '#/components/parameters/PaymentIdParam'
    get:
      summary: Returns payment data
      responses:
        '200':
          description: A JSON containing payment data.
          content:
            application/json:
              schema:
                $ref: '#/schemas/Payment'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'
    patch:
      summary: Update a payment.
      requestBody:
        description: Payments to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        '200':
          $ref: '#/components/schemas/200Ok'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'
    delete:
      summary: Delete a single payment.
      description: Deletes all data of the given payment.
      responses:
        '204':
          $ref: '#/responses/204NoContent'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'
  /users/{userId}/bank-accounts/{bankAccountId}/saving-goals/:
    parameters:
      - $ref: '#/components/parameters/UserIdParam'
      - $ref: '#/components/parameters/BankAccountIdParam'
    get:
      summary: Returns all saving goals of a specific bank account
      parameters:
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/searchParam'
        - $ref: '#/components/parameters/sortOrderParam'
      responses:
        '200':
          description: An array containing all saving goals of a specific bank account.
          content:
            application/json:
              schema:
                type: aray
                items:
                  $ref: '#/schemas/SavingGoal'
    post:
      summary: Adding saving goal to a bank account.
      requestBody:
        description: Saving goal to be added.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SavingGoal'
      responses:
        '201':
          $ref: '#/components/schemas/201Created'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'
  /users/{userId}/bank-accounts/{bankAccountId}/saving-goals/{savingGoalId}/:
    parameters:
      - $ref: '#/components/parameters/UserIdParam'
      - $ref: '#/components/parameters/BankAccountIdParam'
      - $ref: '#/components/parameters/SavingGoalIdParam'
    get:
      summary: Returns saving goal data
      responses:
        '200':
          description: A JSON containing saving goal data.
          content:
            application/json:
              schema:
                $ref: '#/schemas/SavingGoal'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'
    patch:
      summary: Update a saving goal.
      requestBody:
        description: Saving goal to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SavingGoal'
      responses:
        '200':
          $ref: '#/components/schemas/200Ok'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'
    delete:
      summary: Delete a single saving goal.
      description: Deletes all data of the given saving goal.
      responses:
        '204':
          $ref: '#/responses/204NoContent'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'
  /users/{userId}/watchlists/:
    parameters:
      - $ref: '#/components/parameters/UserIdParam'
    get:
      summary: Returns all watch lists of a specific user.
      parameters:
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/searchParam'
        - $ref: '#/components/parameters/sortOrderParam'
      responses:
        '200':
          description: An array containing all saving goals of a user.
          content:
            application/json:
              schema:
                type: aray
                items:
                  $ref: '#/schemas/SavingGoal'
    post:
      summary: Adding a watchlist to a user.
      requestBody:
        description: Watchlist to be added.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Watchlist'
      responses:
        '201':
          $ref: '#/components/schemas/201Created'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'
  /users/{userId}/watchlists/{watchlistId}/:
    parameters:
      - $ref: '#/components/parameters/UserIdParam'
      - $ref: '#/components/parameters/WatchListIdParam'
    get:
      summary: Returns a watchlist.
      responses:
        '200':
          description: A JSON containing watchlist data.
          content:
            application/json:
              schema:
                $ref: '#/schemas/WatchList'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'
    patch:
      summary: Update a watchlist.
      requestBody:
        description: Watchlist to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Watchlist'
      responses:
        '200':
          $ref: '#/components/schemas/200Ok'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'
    delete:
      summary: Delete a single watchlist.
      description: Deletes all data of the given watchlist.
      responses:
        '204':
          $ref: '#/responses/204NoContent'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'
  /banks:
    get:
      summary: Returns all banks.
      parameters:
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/searchParam'
        - $ref: '#/components/parameters/sortOrderParam'
      responses:
        '200':
          description: An array containing all banks.
          content:
            application/json:
              schema:
                type: aray
                items:
                  $ref: '#/schemas/SavingGoal'
    post:
      summary: Adding a bank.
      requestBody:
        description: Bank to be added.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankRequestBody'
      responses:
        '201':
          $ref: '#/components/schemas/201Created'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'
  /banks/{bankId}/:
    parameters:
      - $ref: '#/components/parameters/BankIdParam'
    get:
      summary: Returns a bank.
      responses:
        '200':
          description: A JSON containing bank data.
          content:
            application/json:
              schema:
                $ref: '#/schemas/Bank'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'
    patch:
      summary: Update a bank.
      requestBody:
        description: Bank to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bank'
      responses:
        '200':
          $ref: '#/components/schemas/200Ok'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'
    delete:
      summary: Delete a single bank.
      description: Deletes all data of the given bank.
      responses:
        '204':
          $ref: '#/responses/204NoContent'
        '400':
          $ref: '#/responses/400BadRequest'
        '401':
          $ref: '#/responses/401Unauthorized'
        '403':
          $ref: '#/responses/403Forbidden'
        '404':
          $ref: '#/responses/400NotFound'
        '500':
          $ref: '#/responses/500ServerError'

components:
  schemas:
    Bank:
      type: object 
        properties:
          id:
            type: int
            format: int32
          name: 
            type: string
            example: ABN AMRO
          logo_link:
            type: string
            format: link
    BankAccount:
      type: object
        properties:
          id:
            type: int
            format: int32
          iban:
            type: string
            format: iban
            example: NL02ABNA0123456789 
          bank:
            $ref: '#/schemas/Bank'
          balance:
            type: float
    Payment:
      type: object
        properties:
          id:
            type: int
            format: int32
          amount:
            type: float
          counterparty_name:
            type: string
          counterparty_iban:
            type: string
            format: iban
          status:
            type: id
          category:
            type: string
          created:
            type: timestamp
    SavingGoal:
      type: object
        properties:
          id:
            type: int
            format: int32
          name:
            type: string
          description:
            type: string
          icon:
            type: int
          progress:
            type: float
          goal:
            type: float
    Watchlist:
      type: object
        properties:
          id:
            type: int
            format: int32
          name:
            type: string
          listed_companies:
            type: array
            items:
              type: integer
    Company:
      type: object
        properties:
          id:
            type: int
            format: int32
          name:
            type: string
          logo_link:
            type: string
            format: link
    User:
      type: object
        properties:
          id:
            type: int
            format: int32
          full_name:
            type: string
          email:
            type: string
            format: email
  responses:
    200Ok:
      description: Confirmation of successful operation.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Ok.
    204NoContent:
      description: Confirmation of successful deletion.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: No content.
    201Created:
      description: Resource created.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Resource created.
    400BadRequest:
      description: The request does not contain the specified parameters.
      content:
        application/json:
          schema: 
            type: object
            properties: 
              message:
                type: string
                example: The request does not contain the specified parameters.
    401Unauthorized:
      description: Failed to authenticate
      content:
        application/json:
          schema: 
            type: object
            properties: 
              message:
                type: string
                example: Failed to authenticate.
    403Forbidden:
      description: Insufficient rights to access this resource.
      content:
        application/json:
          schema: 
            type: object
            properties: 
              message:
                type: string
                example: You have insufficient rights to access this resource.
    404NotFound:
      description: This resource could not be found.
      content:
        application/json:
          schema: 
            type: object
            properties: 
              message:
                type: string
                example: This resource could not be found.
    500ServerError:
      description: Unknown server error.
      content:
        application/json:
          schema: 
            type: object
            properties: 
              message:
                type: string
                example: Oops, something went wrong with the server. Please try again, or contact your system administrator.
  parameters:
    UserIdParam:
      in: path
      name: userId
      required: true
      schema:
        type: integer
      description: Id of a user.
    BankAccountIdParam:
      in: path
      name: bankAccountId
      required: true
      schema:
        type: integer
      description: Id of a bank account.
    PaymentIdParam:
      in: path
      name: paymentId
      required: true
      schema:
        type: integer
      description: Id of a payment.
    SavingGoalIdParam:
      in: path
      name: savingGoalId
      required: true
      schema:
        type: integer
      description: Id of a saving goal.
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
      description: The numbers of items to return.
    sortOrderParam:
      in: query
      name: sortOrder
      required: false
      schema:
        type: string
        default: asc
      description: The sort order of items to return.
    sortByParam:
      in: query
      name: sortOrder
      required: false
      schema:
        type: string
      description: The key to sort by.
    searchParam:
      in: query
      name: search
      required: false
      schema:
        type: string
      description: The key to search for.
    paymentStatusParam:
      in: query
      name: status
      required: false
      schema:
        type: string
      description: The payment status to search for.
    paymentCategoryParam:
      in: query
      name: category
      required: false
      schema:
        type: string
      description: The payment category to search for.
